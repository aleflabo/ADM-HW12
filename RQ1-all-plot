{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from datetime import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "files = ['F:\\\\Hannes\\\\Yellow_Cab_Datasets\\\\yellow_tripdata_2018-01.csv',\n",
    "        'F:\\\\Hannes\\\\Yellow_Cab_Datasets\\\\yellow_tripdata_2018-02.csv',\n",
    "        'F:\\\\Hannes\\\\Yellow_Cab_Datasets\\\\yellow_tripdata_2018-03.csv',\n",
    "        'F:\\\\Hannes\\\\Yellow_Cab_Datasets\\\\yellow_tripdata_2018-04.csv',\n",
    "        'F:\\\\Hannes\\\\Yellow_Cab_Datasets\\\\yellow_tripdata_2018-05.csv',\n",
    "        'F:\\\\Hannes\\\\Yellow_Cab_Datasets\\\\yellow_tripdata_2018-06.csv']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x61300630>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "borough_trips = pd.DataFrame()\n",
    "month = 1 \n",
    "data2 = pd.read_csv(\"F:\\\\Hannes\\\\Yellow_Cab_Datasets\\\\taxi _zone_lookup.csv\")\n",
    "date_format = '%Y-%m-%d  %H:%M:%S'\n",
    "\n",
    "for file in files:\n",
    "    #reading files and cleaning data\n",
    "    raw_data  = pd.read_csv(file)\n",
    "    raw_data['trip_duration'] = (pd.to_datetime(raw_data['tpep_dropoff_datetime'], format = date_format) - pd.to_datetime(raw_data['tpep_pickup_datetime'], format = date_format)).astype('timedelta64[m]')\n",
    "    raw_data = raw_data.drop(raw_data[(raw_data.trip_duration > 200 ) | (raw_data.trip_duration < 1 )].index)\n",
    "    data = raw_data.drop(raw_data[(raw_data.trip_distance >= 200) |(raw_data.trip_distance <= 0) | (raw_data.tpep_dropoff_datetime == raw_data.tpep_pickup_datetime) | (raw_data.total_amount < 0) | (pd.DatetimeIndex(raw_data['tpep_pickup_datetime']).month != month) | (pd.DatetimeIndex(raw_data['tpep_pickup_datetime']).year != 2018)].index) \n",
    "    del raw_data\n",
    "    \n",
    "    #optaining columns to use for this request\n",
    "    data = data.loc[:, ['tpep_pickup_datetime', 'PULocationID', 'DOLocationID']]\n",
    "    borough = data.join(data2.set_index('LocationID'), on='PULocationID')\n",
    "    del data \n",
    "    \n",
    "    if month == 1:\n",
    "        #count the trips in every borough and in total and convert from series to dataframe\n",
    "        borough_trips = borough['Borough'].value_counts() \n",
    "        borough_trips = borough_trips.to_frame(name = \"Total Trips\")\n",
    "        borough_trips['Absolute trips ' + str(month)] = borough['Borough'].value_counts() \n",
    "        \n",
    "        #convert pickup time to datetime format\n",
    "        borough['tpep_pickup_datetime'] = pd.to_datetime(borough['tpep_pickup_datetime'])\n",
    "        \n",
    "        #divide borough_count with datetime (get days of a month according to a year from datetime) to get the average trips per day\n",
    "        month_days = borough['tpep_pickup_datetime'].dt.daysinmonth\n",
    "        month_days = month_days.to_frame(name = \"Days_of_the_Month\").tail(1).Days_of_the_Month.item()\n",
    "        borough_trips['Average trips in month ' + str(month)] = borough['Borough'].value_counts() / month_days\n",
    "        \n",
    "        #sum for all the trips in all buroughs\n",
    "        borough_trips.loc['Total', 'Absolute trips ' + str(month)]= borough_trips['Absolute trips ' + str(month)].sum()\n",
    "\n",
    "        #calculate the average for all trips in the month\n",
    "        borough_trips.loc['Total', 'Average trips in month ' + str(month)]= borough.shape[0] / month_days\n",
    "        \n",
    "    else:\n",
    "        #count the trips in every borough and convert from series to dataframe\n",
    "        borough_trips['Absolute trips ' + str(month)] = borough['Borough'].value_counts()\n",
    "        borough_trips['Total Trips'] = borough_trips['Total Trips'] + borough['Borough'].value_counts() \n",
    "        \n",
    "        #convert pickup time to datetime format\n",
    "        borough['tpep_pickup_datetime'] = pd.to_datetime(borough['tpep_pickup_datetime'])\n",
    "        \n",
    "        #divide borough_count with datetime (get days of a month according to a year from datetime) to get the average trips per day\n",
    "        month_days = borough['tpep_pickup_datetime'].dt.daysinmonth\n",
    "        month_days = month_days.to_frame(name = \"Days_of_the_Month\").tail(1).Days_of_the_Month.item()\n",
    "        borough_trips['Average trips in month ' + str(month)] = borough['Borough'].value_counts() / month_days\n",
    "        \n",
    "        #calculate the average for all trips in the month\n",
    "        borough_trips.loc['Total', 'Absolute trips ' + str(month)]= borough_trips['Absolute trips ' + str(month)].sum()\n",
    "        \n",
    "        #sum for trips in all buroughs\n",
    "        borough_trips.loc['Total', 'Average trips in month ' + str(month)]= borough.shape[0] / month_days\n",
    "                      \n",
    "    month = month + 1 \n",
    "    \n",
    "#get the sum of all trips    \n",
    "borough_trips.loc['Total', 'Total Trips']= borough_trips['Total Trips'].sum()\n",
    "\n",
    "#plot everything in one beautiful plot\n",
    "plo = borough_trips.plot.bar(y = ['Average trips in month 1', 'Average trips in month 2', 'Average trips in month 3','Average trips in month 4','Average trips in month 5','Average trips in month 6'], figsize=(12,6), legend=(\"upper left\"))\n",
    "mylabels = ['Average trips per day in January', 'Average trips per day in February', 'Average trips per day in March','Average trips per day in April','Average trips per day in May','Average trips per day in June']\n",
    "plo.legend(loc=9,fontsize=10,fancybox=True, labels=mylabels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x6095b0b8>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plo = borough_trips.plot.bar(y = ['Average trips in month 1', 'Average trips in month 2', 'Average trips in month 3','Average trips in month 4','Average trips in month 5','Average trips in month 6'], figsize=(12,6), legend=(\"upper left\"))\n",
    "mylabels = ['Average trips per day in January', 'Average trips per day in February', 'Average trips per day in March','Average trips per day in April','Average trips per day in May','Average trips per day in June']\n",
    "plo.legend(loc=9,fontsize=10,fancybox=True, labels=mylabels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
